{"version":3,"sources":["App.js","index.js"],"names":["App","initTimerState","hours","minutes","seconds","counter","useState","timerValue","setTimerValue","timerActive","setTimerActive","useEffect","timerSub","interval","subscribe","newCounter","secondCounter","minuteCounter","Math","floor","hourCounter","computedSecond","String","length","computedMinute","unsubscribe","buttonWait","useRef","waitObserver","fromEvent","current","bufferTime","pipe","debounceTime","clickSub","buffer","map","list","filter","x","className","onClick","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPA+GeA,MA1Gf,WACE,IAAMC,EAAiB,CACrBC,MAAO,KACPC,QAAS,KACTC,QAAS,KACTC,QAAS,GALE,EAQuBC,mBAASL,GARhC,mBAQNM,EARM,KAQMC,EARN,OASyBF,oBAAS,GATlC,mBASNG,EATM,KASOC,EATP,KAWbC,qBAAU,WACR,IAEMC,EAFWC,YAAS,KAEAC,WAAU,WAC9BL,GACFD,GAAc,YAAkB,IACxBO,EADuB,EAAdV,QACc,EACvBW,EAAgBD,EAAa,GAC7BE,EAAgBC,KAAKC,MAAOJ,EAAa,GAAM,IAC/CK,EAAcF,KAAKC,MAAMJ,EAAa,MAEtCM,EAC6B,IAAjCC,OAAON,GAAeO,OAAtB,WACQP,GACJA,EACAQ,EAC6B,IAAjCF,OAAOL,GAAeM,OAAtB,WACQN,GACJA,EAIN,MAAO,CACLf,MAH+B,IAA/BoB,OAAOF,GAAaG,OAApB,WAAuCH,GAAgBA,EAIvDjB,QAASqB,EACTpB,QAASiB,EACThB,QAASU,SAMjB,OAAO,kBAAMH,EAASa,iBACrB,CAAChB,EAAaF,EAAWF,UAE5B,IAAMqB,EAAaC,iBAAO,MAE1BhB,qBAAU,WACR,IAAMiB,EAAeC,YAAUH,EAAWI,QAAS,SAC7CC,EAAaH,EAAaI,KAAKC,YAAa,MAU5CC,EARQN,EAAaI,KACzBG,YAAOJ,GACPK,aAAI,SAAAC,GACF,OAAOA,EAAKd,UAEde,aAAO,SAAAC,GAAC,OAAU,IAANA,MAGSzB,WAAU,WAC/BJ,GAAe,kBAAM,QAGvB,OAAO,kBAAMwB,EAAST,iBACrB,IAEH,IAQQvB,EAA4BK,EAA5BL,MAAOC,EAAqBI,EAArBJ,QAASC,EAAYG,EAAZH,QAExB,OACE,mCACE,sBAAKoC,UAAU,YAAf,UACE,mBAAGA,UAAU,OAAb,mBAAwBtC,EAAxB,YAAiCC,EAAjC,YAA4CC,KAC5C,qBAAIoC,UAAU,WAAd,UACE,6BACE,wBACEA,UAAW/B,EAAc,QAAU,QACnCgC,QAlBS,WACnB/B,GAAe,SAAAD,GAAW,OAAKA,MAevB,SAIGA,EAAc,OAAS,YAG5B,6BACE,wBAAQ+B,UAAU,OAAOE,IAAKhB,EAA9B,oBAIF,6BACE,wBAAQc,UAAU,QAAQC,QAzBf,WACnBjC,EAAcP,IAwBN,8BChGZ0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.78b2cc6c.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { interval, fromEvent } from 'rxjs';\nimport { debounceTime, map, buffer, filter } from 'rxjs/operators';\nimport './index.css';\n\nfunction App() {\n  const initTimerState = {\n    hours: '00',\n    minutes: '00',\n    seconds: '00',\n    counter: 0,\n  };\n\n  const [timerValue, setTimerValue] = useState(initTimerState);\n  const [timerActive, setTimerActive] = useState(false);\n\n  useEffect(() => {\n    const timerObs = interval(1000);\n\n    const timerSub = timerObs.subscribe(() => {\n      if (timerActive) {\n        setTimerValue(({ counter }) => {\n          const newCounter = counter + 1;\n          const secondCounter = newCounter % 60;\n          const minuteCounter = Math.floor((newCounter / 60) % 60);\n          const hourCounter = Math.floor(newCounter / 3600);\n\n          const computedSecond =\n            String(secondCounter).length === 1\n              ? `0${secondCounter}`\n              : secondCounter;\n          const computedMinute =\n            String(minuteCounter).length === 1\n              ? `0${minuteCounter}`\n              : minuteCounter;\n          const computedHour =\n            String(hourCounter).length === 1 ? `0${hourCounter}` : hourCounter;\n\n          return {\n            hours: computedHour,\n            minutes: computedMinute,\n            seconds: computedSecond,\n            counter: newCounter,\n          };\n        });\n      }\n    });\n\n    return () => timerSub.unsubscribe();\n  }, [timerActive, timerValue.counter]);\n\n  const buttonWait = useRef(null);\n\n  useEffect(() => {\n    const waitObserver = fromEvent(buttonWait.current, 'click');\n    const bufferTime = waitObserver.pipe(debounceTime(300));\n\n    const click = waitObserver.pipe(\n      buffer(bufferTime),\n      map(list => {\n        return list.length;\n      }),\n      filter(x => x === 2),\n    );\n\n    const clickSub = click.subscribe(() => {\n      setTimerActive(() => false);\n    });\n\n    return () => clickSub.unsubscribe();\n  }, []);\n\n  const startHandler = () => {\n    setTimerActive(timerActive => !timerActive);\n  };\n\n  const resetHandler = () => {\n    setTimerValue(initTimerState);\n  };\n\n  const { hours, minutes, seconds } = timerValue;\n\n  return (\n    <>\n      <div className=\"container\">\n        <p className=\"time\">{`${hours}:${minutes}:${seconds}`}</p>\n        <ul className=\"controls\">\n          <li>\n            <button\n              className={timerActive ? 'reset' : 'start'}\n              onClick={startHandler}\n            >\n              {timerActive ? 'Stop' : 'Start'}\n            </button>\n          </li>\n          <li>\n            <button className=\"wait\" ref={buttonWait}>\n              Wait\n            </button>\n          </li>\n          <li>\n            <button className=\"reset\" onClick={resetHandler}>\n              Reset\n            </button>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}